from __future__ import annotations

from collections.abc import Iterator

import pytest
from django.urls import include, path

from gesha import types, urls


def view() -> None:
    return


# fmt: off
urlpatterns: types.URLPatterns = [
    path("", include((
        [
            path("", view, name="index"),
            path("a/<int:a>/b/<int:a>/", view, name="same_arg_twice"),
            path("ns2", include((
                [
                    path("b/", view, name="double_nested_namespace")
                ],
                "ns2"
            ))),
        ],
        "ns1"
    ))),
    path("unnamed-url/", view),
    path("unnamed-ns/", include(
        [
            path("a/", view, name="inside_unnamed_include")
        ]
    )),
]
# fmt: on

# NOTE: The following paths are expected to be generated by get_paths_dict() from the
# above urlpatterns
expected_paths: list[types.PathInfo] = [
    {
        "name": "ns1:index",
        "route": "/",
        "args": {},
    },
    {
        "name": "ns1:same_arg_twice",
        "route": "/a/<int:a>/b/<int:a>/",
        "args": {
            "a": "int",
        },
    },
    {
        "name": "ns1:ns2:double_nested_namespace",
        "route": "/ns2/b/",
        "args": {},
    },
    {
        "name": "inside_unnamed_include",
        "route": "/unnamed-ns/a/",
        "args": {},
    },
]


@pytest.fixture
def urlconf() -> Iterator[types.URLConf]:
    yield __name__


@pytest.fixture
def paths_dict(urlconf) -> Iterator[types.Paths]:
    yield urls.get_paths_dict(urlconf)


@pytest.fixture(params=expected_paths)
def expected_path(request: pytest.FixtureRequest) -> Iterator[types.PathInfo]:
    yield request.param


def test_urls_have_correct_name(
    paths_dict: types.Paths, expected_path: types.PathInfo
) -> None:
    name = expected_path["name"]
    assert name in paths_dict
    assert paths_dict[name]["name"] == name


def test_urls_have_correct_route(
    paths_dict: types.Paths, expected_path: types.PathInfo
) -> None:
    name = expected_path["name"]
    if path_info := paths_dict.get(name):
        assert path_info["route"] == expected_path["route"]
    else:
        pytest.skip(f"'{name}' not found in 'paths_dict', see other failing test.")


def test_urls_have_correct_args(
    paths_dict: types.Paths, expected_path: types.PathInfo
) -> None:
    name = expected_path["name"]
    if path_info := paths_dict.get(name):
        for key, value in path_info["args"].items():
            assert value == expected_path["args"][key]
    else:
        pytest.skip(f"'{name}' not found in 'paths_dict', see other failing test.")


def test_paths_dict_does_not_contain_unnamed_urls(paths_dict: types.Paths) -> None:
    assert None not in paths_dict


def test_get_paths_dict_can_load_default_urlconf() -> None:
    paths_dict = urls.get_paths_dict()
    assert "fake:test" in paths_dict
